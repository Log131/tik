from aiogram import Dispatcher,Bot,executor,types

from aiogram.types import ChatMemberStatus, InlineKeyboardButton, InlineKeyboardMarkup

import datetime
import aiosqlite
import asyncio
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext





token = '6937427392:AAF8ZtTp-FBeODozbOUfsGNWo5tzKj2xSF0'


bot = Bot(token=token)
dp = Dispatcher(bot=bot, storage=MemoryStorage())





async def datas_():
    async with aiosqlite.connect('teleg.db') as tc:
        await tc.execute('CREATE TABLE IF NOT EXISTS users(userid PRIMARYKEY,dates TIMESTAMP,sends)')
        await tc.execute('CREATE TABLE IF NOT EXISTS rrrrr(videos)')
        await tc.commit()
    async with aiosqlite.connect('teleg.db') as tc:
        await tc.execute('INSERT OR REPLACE INTO rrrrr(videos) VALUES (?)', ('—Å—Å—ã–ª–∫–∞',))
        await tc.commit()

@dp.message_handler(commands=['start'])
async def state_(msg: types.Message):
    row = InlineKeyboardMarkup()
    
    rows = InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª', url='https://t.me/kaif_works')
    rows_5 = InlineKeyboardButton(text='–Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è ‚òëÔ∏è', callback_data=f'set_{msg.from_user.id}')
    
    
    row.add(rows).add(rows_5)
    dates = (datetime.datetime.now() + datetime.timedelta(minutes=3)).strftime('%Y-%m-%d %H:%M')
    async with aiosqlite.connect('teleg.db') as tc:
        
        await tc.execute('INSERT OR REPLACE INTO users(userid,dates,sends) VALUES (?,?,?)', (msg.from_user.id,dates,0,))
        
        await tc.commit()

    try:
        await msg.answer('–ü—Ä–∏–≤–µ—Ç!\n\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Ç–æ—Ä–æ–π —á–∞—Å—Ç–∏ –∏–∑ –¢–∏–∫–¢–æ–∫–∞, –Ω—É–∂–Ω–æ –±—ã—Ç—å\n–ø–æ–¥–ø–∏—Å–∞–Ω–Ω—ã–º –Ω–∞ –∫–∞–Ω–∞–ª –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤\n@kaif_works üí∏\n–¢—ã –º–æ–∂–µ—à—å —Ä–µ–∞–ª—å–Ω–æ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤\n—Ö–æ—Ä–æ—à–∏–µ –¥–µ–Ω—å–≥–∏ üî•üöÄ\n\n–ü–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ —Ç—ã –ø–æ–¥–ø–∏—à–µ—à—å—Å—è, –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å\n‚ù§Ô∏èüôè', reply_markup=row)
    except:
        pass


@dp.callback_query_handler(text_contains='set')
async def state_5(css: types.CallbackQuery):
    s = css.data.split('_')
    s_ = await bot.get_chat_member(chat_id=-1001791109996, user_id=s[1])
    if s_.status in [ChatMemberStatus.MEMBER, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
        await css.message.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É. \n –ê —Ç–µ–ø–µ—Ä—å –æ–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ª—ë–≥–∫–∏–º –∑–∞—Ä–∞–±–æ—Ç–∫–æ–º –Ω–∞ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤ –∏ —á–µ—Ä–µ–∑ 2 –º–∏–Ω—É—Ç—ã –≤–∞–º –ø—Ä–∏–¥—ë—Ç —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤—Ç–æ—Ä—É—é —á–∞—Å—Ç—å.\n –•–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è ‚ù§Ô∏è')
    else:
        await css.message.answer('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –∫–∞–Ω–∞–ª')




class sends(StatesGroup):
    state_s = State()



@dp.message_handler(commands=['r'], state=None)
async def state_6(msg: types.Message, state: FSMContext):
    row = InlineKeyboardMarkup()
    rows = InlineKeyboardButton(text='–û—Ç–º–µ–Ω–∞', callback_data='cansel')
    row.add(rows)
    s = await bot.get_chat_member(chat_id=-1001791109996, user_id=msg.from_user.id)
    if s.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
        await msg.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –≤–∏–¥–µ–æ', reply_markup=row)
        await sends.state_s.set()





@dp.message_handler(state=sends.state_s)
async def state_555(msg: types.Message, state: FSMContext):
    try:
        async with aiosqlite.connect('teleg.db') as tc:
            await tc.execute('UPDATE rrrrr SET videos = ?', (msg.text,))
            await tc.commit()
        await msg.answer('–û–±–Ω–æ–≤–ª–µ–Ω–æ!')
        await state.finish()
    except Exception as e:

        print(e)
        await state.finish()
        await msg.answer('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞')

@dp.callback_query_handler(text='cansel', state=sends.state_s)
async def state_565(css: types.CallbackQuery, state: FSMContext):
    await css.answer()

    await state.finish()
    
    await css.message.answer('–û—Ç–º–µ–Ω–µ–Ω–æ')





if __name__ == '__main__':
    f = asyncio.get_event_loop()
    f.run_until_complete(datas_())
    executor.start_polling(dp, skip_updates=True)
